using OpenTK.Graphics.OpenGL;
using SFGraphics.GLObjects.Shaders;
using System.Collections.Generic;
using System.IO;

namespace CrossMod.Rendering
{
    public static class ShaderContainer
    {
        private static Dictionary<string, Shader> shaderByName = new Dictionary<string, Shader>();

        public static Shader GetShader(string name)
        {
            if (shaderByName.ContainsKey(name))
                return shaderByName[name];
            else
                return null;
        }

        public static void SetUpShaders()
        {
            shaderByName.Clear();

            Shader rModel = CreateRModelShader();
            shaderByName.Add("RModel", rModel);

            Shader rModelUv = CreateRModelUvShader();
            shaderByName.Add("RModelUV", rModelUv);

            // TODO: This shader can be generated by SFGraphics.
            Shader rModelDebug = CreateRModelDebugShader();
            shaderByName.Add("RModelDebug", rModelDebug);
            
            Shader textureShader = CreateTextureShader();
            shaderByName.Add("RTexture", textureShader);
        }

        private static Shader CreateTextureShader()
        {
            Shader textureShader = new Shader();
            textureShader.LoadShader(File.ReadAllText("Shaders/Texture.frag"), ShaderType.FragmentShader);
            textureShader.LoadShader(File.ReadAllText("Shaders/Texture.vert"), ShaderType.VertexShader);
            textureShader.LoadShader(File.ReadAllText("Shaders/Gamma.frag"), ShaderType.FragmentShader);
            return textureShader;
        }

        private static Shader CreateRModelDebugShader()
        {
            Shader rModelDebug = new Shader();
            rModelDebug.LoadShader(File.ReadAllText("Shaders/RModelDebug.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/RModel.geom"), ShaderType.GeometryShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/NormalMap.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/RModel.vert"), ShaderType.VertexShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/Gamma.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/Wireframe.frag"), ShaderType.FragmentShader);
            return rModelDebug;
        }

        private static Shader CreateRModelUvShader()
        {
            Shader rModelUv = new Shader();
            rModelUv.LoadShader(File.ReadAllText("Shaders/RModelUV.vert"), ShaderType.VertexShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/RModel.geom"), ShaderType.GeometryShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/RModelUV.frag"), ShaderType.FragmentShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/NormalMap.frag"), ShaderType.FragmentShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/Wireframe.frag"), ShaderType.FragmentShader);
            return rModelUv;
        }

        private static Shader CreateRModelShader()
        {
            Shader rModel = new Shader();
            rModel.LoadShader(File.ReadAllText("Shaders/RModel.vert"), ShaderType.VertexShader);
            rModel.LoadShader(File.ReadAllText("Shaders/RModel.geom"), ShaderType.GeometryShader);
            rModel.LoadShader(File.ReadAllText("Shaders/RModel.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/Gamma.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/NormalMap.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/Wireframe.frag"), ShaderType.FragmentShader);
            return rModel;
        }
    }
}
