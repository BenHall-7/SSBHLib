using OpenTK.Graphics.OpenGL;
using SFGraphics.GLObjects.Shaders;
using System.Collections.Generic;
using System.IO;

namespace CrossMod.Rendering
{
    /// <summary>
    /// Stores all <see cref="Shader"/> instances used for rendering.
    /// </summary>
    public static class ShaderContainer
    {
        private static readonly SFShaderLoader.ShaderLoader shaderLoader = new SFShaderLoader.ShaderLoader();

        public static Shader GetShader(string name)
        {
            return shaderLoader.GetShader(name);
        }

        public static void SetUpShaders()
        {
            CreateRModelShader();
            CreateRModelUvShader();
            CreateTextureShader();

            // TODO: This shader can be generated by SFGraphics.
            CreateRModelDebugShader();      
        }

        private static void CreateTextureShader()
        {
            shaderLoader.AddShader("RTexture",
                new List<string>() { File.ReadAllText("Shaders/Texture.vert") },
                new List<string>()
                {
                    File.ReadAllText("Shaders/Texture.frag"),
                    File.ReadAllText("Shaders/Gamma.frag")
                },
                new List<string>()
            );
        }

        private static void CreateRModelDebugShader()
        {
            shaderLoader.AddShader("RModelDebug",
                new List<string>() { File.ReadAllText("Shaders/RModel.vert") },
                new List<string>()
                {
                    File.ReadAllText("Shaders/RModelDebug.frag"),
                    File.ReadAllText("Shaders/NormalMap.frag"),
                    File.ReadAllText("Shaders/Gamma.frag"),
                    File.ReadAllText("Shaders/WireFrame.frag"),
                    File.ReadAllText("Shaders/TextureLayers.frag")
                },
                new List<string>() { File.ReadAllText("Shaders/RModel.geom") }
            );
        }

        private static void CreateRModelUvShader()
        {
            shaderLoader.AddShader("RModelUV",
                new List<string>() { File.ReadAllText("Shaders/RModelUV.vert") },
                new List<string>()
                {
                    File.ReadAllText("Shaders/RModelUV.frag"),
                    File.ReadAllText("Shaders/NormalMap.frag"),
                    File.ReadAllText("Shaders/Gamma.frag"),
                    File.ReadAllText("Shaders/WireFrame.frag"),
                },
                new List<string>() { File.ReadAllText("Shaders/RModel.geom") }
            );
        }

        private static void CreateRModelShader()
        {
            shaderLoader.AddShader("RModel", 
                new List<string>() { File.ReadAllText("Shaders/RModel.vert") }, 
                new List<string>()
                {
                    File.ReadAllText("Shaders/RModel.frag"),
                    File.ReadAllText("Shaders/NormalMap.frag"),
                    File.ReadAllText("Shaders/Gamma.frag"),
                    File.ReadAllText("Shaders/WireFrame.frag"),
                    File.ReadAllText("Shaders/TextureLayers.frag")

                }, 
                new List<string>() { File.ReadAllText("Shaders/RModel.geom") }
            );
        }
    }
}
