using OpenTK.Graphics.OpenGL;
using SFGraphics.GLObjects.Shaders;
using System.Collections.Generic;
using System.IO;

namespace CrossMod.Rendering
{
    /// <summary>
    /// Stores all <see cref="Shader"/> instances used for rendering.
    /// </summary>
    public static class ShaderContainer
    {
        private static Dictionary<string, Shader> shaderByName { get; set; }

        public static Shader GetShader(string name)
        {
            if (shaderByName.ContainsKey(name))
                return shaderByName[name];
            else
                return null;
        }

        static ShaderContainer()
        {
            shaderByName = new Dictionary<string, Shader>();

            LoadShaders();
        }

        public static void LoadShaders()
        {
            shaderByName.Clear();

            Shader rModel = CreateRModelShader();
            shaderByName.Add("RModel", rModel);

            Shader rModelUv = CreateRModelUvShader();
            shaderByName.Add("RModelUV", rModelUv);

            // TODO: This shader can be generated by SFGraphics.
            Shader rModelDebug = CreateRModelDebugShader();
            shaderByName.Add("RModelDebug", rModelDebug);

            Shader textureShader = CreateTextureShader();
            shaderByName.Add("RTexture", textureShader);

            Shader sphere = CreateSphereShader();
            shaderByName.Add("Sphere", sphere);

            Shader capsule = CreateCapsuleShader();
            shaderByName.Add("Capsule", capsule);

            Shader line = CreateLineShader();
            shaderByName.Add("Line", line);

            Shader polygon = CreatePolygonShader();
            shaderByName.Add("Polygon", polygon);
        }

        private static Shader CreateTextureShader()
        {
            Shader textureShader = new Shader();
            textureShader.LoadShader(File.ReadAllText("Shaders/Texture.frag"), ShaderType.FragmentShader);
            textureShader.LoadShader(File.ReadAllText("Shaders/Texture.vert"), ShaderType.VertexShader);
            textureShader.LoadShader(File.ReadAllText("Shaders/Gamma.frag"), ShaderType.FragmentShader);
            return textureShader;
        }

        private static Shader CreateRModelDebugShader()
        {
            Shader rModelDebug = new Shader();
            rModelDebug.LoadShader(File.ReadAllText("Shaders/RModelDebug.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/RModel.geom"), ShaderType.GeometryShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/NormalMap.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/RModel.vert"), ShaderType.VertexShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/Gamma.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/Wireframe.frag"), ShaderType.FragmentShader);
            rModelDebug.LoadShader(File.ReadAllText("Shaders/TextureLayers.frag"), ShaderType.FragmentShader);
            return rModelDebug;
        }

        private static Shader CreateRModelUvShader()
        {
            Shader rModelUv = new Shader();
            rModelUv.LoadShader(File.ReadAllText("Shaders/RModelUV.vert"), ShaderType.VertexShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/RModel.geom"), ShaderType.GeometryShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/RModelUV.frag"), ShaderType.FragmentShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/NormalMap.frag"), ShaderType.FragmentShader);
            rModelUv.LoadShader(File.ReadAllText("Shaders/Wireframe.frag"), ShaderType.FragmentShader);
            return rModelUv;
        }

        private static Shader CreateRModelShader()
        {
            Shader rModel = new Shader();
            rModel.LoadShader(File.ReadAllText("Shaders/RModel.vert"), ShaderType.VertexShader);
            rModel.LoadShader(File.ReadAllText("Shaders/RModel.geom"), ShaderType.GeometryShader);
            rModel.LoadShader(File.ReadAllText("Shaders/RModel.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/Gamma.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/NormalMap.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/Wireframe.frag"), ShaderType.FragmentShader);
            rModel.LoadShader(File.ReadAllText("Shaders/TextureLayers.frag"), ShaderType.FragmentShader);
            return rModel;
        }

        private static Shader CreateSphereShader()
        {
            Shader sphere = new Shader();
            sphere.LoadShader(File.ReadAllText("Shaders/SolidColor.frag"), ShaderType.FragmentShader);
            sphere.LoadShader(File.ReadAllText("Shaders/Sphere.vert"), ShaderType.VertexShader);
            return sphere;
        }

        private static Shader CreateCapsuleShader()
        {
            Shader capsule = new Shader();
            capsule.LoadShader(File.ReadAllText("Shaders/SolidColor.frag"), ShaderType.FragmentShader);
            capsule.LoadShader(File.ReadAllText("Shaders/Capsule.vert"), ShaderType.VertexShader);
            return capsule;
        }

        private static Shader CreateLineShader()
        {
            Shader line = new Shader();
            line.LoadShader(File.ReadAllText("Shaders/SolidColor.frag"), ShaderType.FragmentShader);
            line.LoadShader(File.ReadAllText("Shaders/Line.vert"), ShaderType.VertexShader);
            return line;
        }

        private static Shader CreatePolygonShader()
        {
            Shader poly = new Shader();
            poly.LoadShader(File.ReadAllText("Shaders/SolidColor.frag"), ShaderType.FragmentShader);
            poly.LoadShader(File.ReadAllText("Shaders/Polygon.vert"), ShaderType.VertexShader);
            return poly;
        }
    }
}
